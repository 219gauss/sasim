/*
   0,1,0,0,0
   0,1,0,1,0
   0,0,0,0,0
   0,1,1,1,0
   0,0,0,1,0
 */

#include <stdio.h>
#include <queue>

using namespace std;

typedef pair<int,int> Node;
queue <Node> Q; //用于缓存下一个节点
int map[5][5] = {{0,1,0,0,0},
                {0,1,0,1,0},
                {0,0,0,0,0},
                {0,1,1,1,0},
                {0,0,0,1,0}}; //迷宫地图

int dir[4][2] = {{1,0},{0,1},{-1,0},{0,-1}}; //迷宫里移动的方向
bool path[5][5] = {false}; //记录走过的路径

Node Vs(0,4),Ve(4,0),Vn,Vw; //迷宫起点和终点位置

int main(){  
    Q.push(Vs); //起点进栈
    path[Vs.first][Vs.second] = true;

    while(!Q.empty()){

        Vn = Q.front();
        Q.pop();

        for(int i=0; i<4 ; i++){

            Vw = make_pair(Vn.first+dir[i][0],Vn.second+dir[i][1]);  
            if(Vw == Ve){ //找到终点
                path[Vw.first][Vw.second] = true;
                break;
            }

            //判断Vn是否合法
            if(Vw.first < 0 || Vw.first > 4) continue;
            if(Vw.second < 0 || Vw.second > 4) continue;
            if(map[4-Vw.second][Vw.first] != 0) continue;
            if((path[Vw.first][Vw.second] != true)){
                Q.push(Vw);
                path[Vw.first][Vw.second] = true;
            }
        }
    }

    printf("path is :\n");
    for(int i =0; i < 5; i++){
        for(int j = 0; j < 5; j++){
            if(path[j][4-i]){   //坐标系转换为数组下标在打印
                printf("* ");
            }else{
                printf("x ");
            }
        }
        printf("\n");
    }
    return 1;
}
